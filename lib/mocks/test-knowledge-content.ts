/**
 * Test dataset for developers who don't have the full knowledge_content database
 * Enable by setting USE_TEST_DATA=true in .env
 */

import type { KnowledgeContent } from "@/lib/supabase/types";

// Simplified test type that only includes required fields
export interface TestKnowledgeContent
  extends Pick<KnowledgeContent, "id" | "title" | "type" | "summary"> {
  embedding?: number[]; // Pre-computed test embeddings
}

export const testKnowledgeContent: TestKnowledgeContent[] = [
  // Mental Models
  {
    id: "test-1",
    title: "First Principles Thinking",
    type: "mental-model" as const,
    summary: "Break down complex problems into fundamental truths and build up from there.",
  },
  {
    id: "test-2",
    title: "Parkinson's Law",
    type: "mental-model",
    summary: "Work expands to fill the time available for its completion.",
  },
  {
    id: "test-3",
    title: "Eisenhower Matrix",
    type: "mental-model",
    summary: "Prioritize tasks by urgency and importance to focus on what matters most.",
  },
  {
    id: "test-4",
    title: "80/20 Rule (Pareto Principle)",
    type: "mental-model",
    summary: "80% of results come from 20% of efforts - focus on high-impact activities.",
  },
  {
    id: "test-5",
    title: "Second-Order Thinking",
    type: "mental-model",
    summary: "Consider the consequences of consequences when making decisions.",
  },
  {
    id: "test-6",
    title: "Inversion",
    type: "mental-model",
    summary: "Solve problems by thinking about what you want to avoid.",
  },
  {
    id: "test-7",
    title: "Occam's Razor",
    type: "mental-model",
    summary: "The simplest explanation is usually the correct one.",
  },

  // Cognitive Biases
  {
    id: "test-8",
    title: "Confirmation Bias",
    type: "cognitive-bias",
    summary: "Tendency to search for information that confirms our existing beliefs.",
  },
  {
    id: "test-9",
    title: "Planning Fallacy",
    type: "cognitive-bias",
    summary: "Tendency to underestimate the time needed to complete tasks.",
  },
  {
    id: "test-10",
    title: "Dunning-Kruger Effect",
    type: "cognitive-bias",
    summary:
      "Less competent people overestimate their abilities while experts underestimate theirs.",
  },
  {
    id: "test-11",
    title: "Sunk Cost Fallacy",
    type: "cognitive-bias",
    summary: "Continuing a behavior because of previously invested resources.",
  },
  {
    id: "test-12",
    title: "Availability Heuristic",
    type: "cognitive-bias",
    summary: "Overestimating the likelihood of events we can easily recall.",
  },
  {
    id: "test-13",
    title: "Anchoring Bias",
    type: "cognitive-bias",
    summary: "Over-relying on the first piece of information encountered.",
  },
  {
    id: "test-14",
    title: "Status Quo Bias",
    type: "cognitive-bias",
    summary: "Preference for the current state of affairs and resistance to change.",
  },

  // Additional diverse content
  {
    id: "test-15",
    title: "Systems Thinking",
    type: "mental-model",
    summary: "Understanding how parts interact within a whole system.",
  },
  {
    id: "test-16",
    title: "Feedback Loops",
    type: "mental-model",
    summary: "How outputs of a system feed back as inputs, creating cycles.",
  },
  {
    id: "test-17",
    title: "Marginal Thinking",
    type: "mental-model",
    summary: "Making decisions based on incremental changes rather than absolutes.",
  },
  {
    id: "test-18",
    title: "Opportunity Cost",
    type: "mental-model",
    summary: "The value of the best alternative foregone when making a choice.",
  },
  {
    id: "test-19",
    title: "Hindsight Bias",
    type: "cognitive-bias",
    summary: "Believing past events were more predictable than they actually were.",
  },
  {
    id: "test-20",
    title: "Bandwagon Effect",
    type: "cognitive-bias",
    summary: "Tendency to do things because many other people do the same.",
  },
];

/**
 * Generate mock embeddings for test data
 * In production, these would be generated by the AI service
 */
export function generateTestEmbedding(content: TestKnowledgeContent): number[] {
  // Create a simple but deterministic embedding based on content
  const text = `${content.title} ${content.summary}`.toLowerCase();
  const embedding = new Array(1536).fill(0);

  // Simple hashing to create variety in embeddings
  for (let i = 0; i < text.length; i++) {
    const charCode = text.charCodeAt(i);
    const index = (charCode * 7 + i * 13) % 1536;
    embedding[index] = Math.sin(charCode) * 0.5 + 0.5;
  }

  // Add some keywords-based signals
  if (text.includes("time") || text.includes("procrastin")) {
    embedding[100] = 0.9;
  }
  if (text.includes("decision") || text.includes("think")) {
    embedding[200] = 0.9;
  }
  if (text.includes("bias") || text.includes("fallacy")) {
    embedding[300] = 0.9;
  }

  return embedding;
}

/**
 * Simulate semantic search for test data
 */
export function testSemanticSearch(
  query: string,
  limit: number = 7
): Array<
  Partial<KnowledgeContent> & {
    id: string;
    title: string;
    type: KnowledgeContent["type"];
    summary: string | null;
    similarity: number;
  }
> {
  // Simple keyword matching for test purposes
  const queryLower = query.toLowerCase();

  const scored = testKnowledgeContent.map((content) => {
    let score = 0;
    const contentText = `${content.title} ${content.summary}`.toLowerCase();

    // Basic keyword matching
    if (queryLower.includes("procrastin") && contentText.includes("time")) score += 0.3;
    if (queryLower.includes("procrastin") && contentText.includes("parkinson")) score += 0.5;
    if (queryLower.includes("decision") && contentText.includes("decision")) score += 0.4;
    if (queryLower.includes("decision") && contentText.includes("think")) score += 0.3;
    if (queryLower.includes("bias") && content.type === "cognitive-bias") score += 0.2;
    if (queryLower.includes("productiv") && contentText.includes("pareto")) score += 0.4;
    if (queryLower.includes("productiv") && contentText.includes("eisenhower")) score += 0.4;

    // Prefer mental models for foundational learning
    if (content.type === "mental-model") score += 0.1;

    // Add some randomness for variety
    score += Math.random() * 0.1;

    return { ...content, similarity: score };
  });

  // Sort by score and return top results
  return scored
    .sort((a, b) => b.similarity - a.similarity)
    .slice(0, limit)
    .map(({ embedding: _embedding, ...rest }) => rest); // Remove embedding field to match database type
}
